variables:
  # Packages versions
  # NOTE: when adding variables here update also trigger from mender-qa:
  # https://github.com/mendersoftware/mender-qa/blob/master/gitlab-pipeline/stage/trigger-packages.yml
  MENDER_VERSION:
    value: "master"
    description: "Version of mender repository"
  MENDER_CONNECT_VERSION:
    value: "master"
    description: "Version of mender-connect repository"
  MENDER_CONFIGURE_VERSION:
    value: "master"
    description: "Version of mender-configure repository"
  MENDER_ARTIFACT_VERSION:
    value: "master"
    description: "Version of mender-artifact repository"
  MENDER_APP_UPDATE_MODULE_VERSION:
    value: "master"
    description: "Version of mender-app-update-module repository"
  MENDER_SETUP_VERSION:
    value: "master"
    description: "Version of mender-setup repository"
  MENDER_SNAPSHOT_VERSION:
    value: "master"
    description: "Version of mender-snapshot repository"
  MENDER_FLASH_VERSION:
    value: "master"
    description: "Version of mender-flash repository"
  MENDER_GATEWAY_VERSION:
    value: "master"
    description: "Version of mender-gateway repository"
  MENDER_MONITOR_VERSION:
    value: "master"
    description: "Version of monitor-client repository"
  # Bucket name
  S3_BUCKET_NAME: "mender"
  S3_BUCKET_NAME_PRIVATE: "mender-binaries"
  # Legacy path for mender-client: <version>/$S3_BUCKET_SUBPATH/...
  S3_BUCKET_SUBPATH: "dist-packages/debian"
  S3_BUCKET_SUBPATH_GATEWAY: "mender-gateway/debian"
  S3_BUCKET_SUBPATH_MONITOR: "mender-monitor/debian"
  # APT repo path for incoming packages
  S3_BUCKET_REPO_PATH: "repos/debian/incoming"
  # Scripts folder subpath
  S3_BUCKET_SCRIPTS_PATH: "repos/scripts"
  # GPG key for build, to be set by CI/CD variables
  GPG_PRIV_KEY_BUILD: ""
  TEST_MENDER_DIST_PACKAGES:
    value: "true"
    description: "Whether to run acceptance tests"
  PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC:
    value: "false"
    description: |-
      Whether to publish packages automatically - they can always be published manually
  # Workaround for GitLab intermittent networking
  FF_NETWORK_PER_BUILD: 1
  # Builder image version
  IMAGE_VERSION: "master"
  # Debian suffix
  OVERRIDE_DEBIAN_SUFFIX:
    value: ""
    description: |-
      Overrides Debian suffix, which by default is "-1". Use it to manually build (and publish)
      a new version of a package from already released (git tagged) software.
  # Protected CI variables to access private repositories
  MENDER_PRIVATE_REPO_ACCESS_USER: ""
  MENDER_PRIVATE_REPO_ACCESS_TOKEN: ""

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file:
      - '.gitlab-ci-check-commits-signoffs.yml'
      - '.gitlab-ci-check-license.yml'
      - '.gitlab-ci-check-python3-format.yml'
      - '.gitlab-ci-github-status-updates.yml'
  - local: 'gitlab-pipeline/test-acceptance.yml'

stages:
  - build:orig
  - build:package
  - test
  - publish

.generate-config:
  stage: .pre
  image: alpine
  before_script: apk add --no-cache gettext
  script: envsubst '$TMPL_PACKAGE_NAME,$TMPL_PACKAGE_VERSION,$TMPL_PYTEST_FILTER' < gitlab-pipeline/package-pipeline.yml.tmpl > package-pipeline.yml
  artifacts:
    paths:
      - package-pipeline.yml

generate-config:mender-client4:
  extends: .generate-config
  rules:
    - if: '$MENDER_VERSION =~ /^[23]\..*/'
      when: never
    - if: '$MENDER_VERSION != ""'
  variables:
    TMPL_PACKAGE_NAME: mender-client4
    TMPL_PACKAGE_VERSION: $MENDER_VERSION
    TMPL_PYTEST_FILTER: "test_mender_client_cpp or test_mender_client_dev"

child-pipeline:mender-client4:
  rules:
    - if: '$MENDER_VERSION =~ /^[23]\..*/'
      when: never
    - if: '$MENDER_VERSION != ""'
  stage: test
  needs:
    - job: generate-config:mender-client4
      artifacts: true
  trigger:
    include:
      - job: generate-config:mender-client4
        artifact: package-pipeline.yml

generate-config:mender-client:
  extends: .generate-config
  rules:
    - if: '$MENDER_VERSION =~ /^[23]\..*/'
  variables:
    TMPL_PACKAGE_NAME: mender-client
    TMPL_PACKAGE_VERSION: $MENDER_VERSION
    TMPL_PYTEST_FILTER: "test_mender_client and not test_mender_client_cpp"

child-pipeline:mender-client:
  rules:
    - if: '$MENDER_VERSION =~ /^[23]\..*/'
  stage: test
  needs:
    - job: generate-config:mender-client
      artifacts: true
  trigger:
    include:
      - job: generate-config:mender-client
        artifact: package-pipeline.yml

generate-config:mender-connect:
  extends: .generate-config
  rules:
    - if: '$MENDER_CONNECT_VERSION != ""'
  variables:
    TMPL_PACKAGE_NAME: mender-connect
    TMPL_PACKAGE_VERSION: $MENDER_CONNECT_VERSION
    TMPL_PYTEST_FILTER: test_mender_connect

child-pipeline:mender-connect:
  rules:
    - if: '$MENDER_CONNECT_VERSION != ""'
  stage: test
  needs:
    - job: generate-config:mender-connect
      artifacts: true
  trigger:
    include:
      - job: generate-config:mender-connect
        artifact: package-pipeline.yml

generate-config:mender-configure:
  extends: .generate-config
  rules:
    - if: '$MENDER_CONFIGURE_VERSION != ""'
  variables:
    TMPL_PACKAGE_NAME: mender-configure
    TMPL_PACKAGE_VERSION: $MENDER_CONFIGURE_VERSION
    TMPL_PYTEST_FILTER: test_mender_configure

child-pipeline:mender-configure:
  rules:
    - if: '$MENDER_CONFIGURE_VERSION != ""'
  stage: test
  needs:
    - job: generate-config:mender-configure
      artifacts: true
  trigger:
    include:
      - job: generate-config:mender-configure
        artifact: package-pipeline.yml

generate-config:mender-artifact:
  extends: .generate-config
  rules:
    - if: '$MENDER_ARTIFACT_VERSION != ""'
  variables:
    TMPL_PACKAGE_NAME: mender-artifact
    TMPL_PACKAGE_VERSION: $MENDER_ARTIFACT_VERSION
    TMPL_PYTEST_FILTER: test_package_tools

child-pipeline:mender-artifact:
  rules:
    - if: '$MENDER_ARTIFACT_VERSION != ""'
  stage: test
  needs:
    - job: generate-config:mender-artifact
      artifacts: true
  trigger:
    include:
      - job: generate-config:mender-artifact
        artifact: package-pipeline.yml

generate-config:mender-app-update-module:
  extends: .generate-config
  rules:
    - if: '$MENDER_APP_UPDATE_MODULE_VERSION != ""'
  variables:
    TMPL_PACKAGE_NAME: mender-app-update-module
    TMPL_PACKAGE_VERSION: $MENDER_APP_UPDATE_MODULE_VERSION
    TMPL_PYTEST_FILTER: test_package_app_update_module

child-pipeline:mender-app-update-module:
  rules:
    - if: '$MENDER_APP_UPDATE_MODULE_VERSION != ""'
  stage: test
  needs:
    - job: generate-config:mender-app-update-module
      artifacts: true
  trigger:
    include:
      - job: generate-config:mender-app-update-module
        artifact: package-pipeline.yml

generate-config:mender-setup:
  extends: .generate-config
  rules:
    - if: '$MENDER_SETUP_VERSION != ""'
  variables:
    TMPL_PACKAGE_NAME: mender-setup
    TMPL_PACKAGE_VERSION: $MENDER_SETUP_VERSION
    TMPL_PYTEST_FILTER: test_package_setup

child-pipeline:mender-setup:
  rules:
    - if: '$MENDER_SETUP_VERSION != ""'
  stage: test
  needs:
    - job: generate-config:mender-setup
      artifacts: true
  trigger:
    include:
      - job: generate-config:mender-setup
        artifact: package-pipeline.yml

generate-config:mender-snapshot:
  extends: .generate-config
  rules:
    - if: '$MENDER_SNAPSHOT_VERSION != ""'
  variables:
    TMPL_PACKAGE_NAME: mender-snapshot
    TMPL_PACKAGE_VERSION: $MENDER_SNAPSHOT_VERSION
    TMPL_PYTEST_FILTER: test_package_snapshot

child-pipeline:mender-snapshot:
  rules:
    - if: '$MENDER_SNAPSHOT_VERSION != ""'
  stage: test
  needs:
    - job: generate-config:mender-snapshot
      artifacts: true
  trigger:
    include:
      - job: generate-config:mender-snapshot
        artifact: package-pipeline.yml

generate-config:mender-flash:
  extends: .generate-config
  rules:
    - if: '$MENDER_FLASH_VERSION != ""'
  variables:
    TMPL_PACKAGE_NAME: mender-flash
    TMPL_PACKAGE_VERSION: $MENDER_FLASH_VERSION
    TMPL_PYTEST_FILTER: test_package_flash

child-pipeline:mender-flash:
  rules:
    - if: '$MENDER_FLASH_VERSION != ""'
  stage: test
  needs:
    - job: generate-config:mender-flash
      artifacts: true
  trigger:
    include:
      - job: generate-config:mender-flash
        artifact: package-pipeline.yml

generate-config:mender-gateway:
  extends: .generate-config
  rules:
    - if: '$MENDER_PRIVATE_REPO_ACCESS_TOKEN == ""'
      when: never
    - if: '$MENDER_GATEWAY_VERSION != ""'
  variables:
    TMPL_PACKAGE_NAME: mender-gateway
    TMPL_PACKAGE_VERSION: $MENDER_GATEWAY_VERSION
    TMPL_PYTEST_FILTER: test_package_gateway

child-pipeline:mender-gateway:
  rules:
    - if: '$MENDER_PRIVATE_REPO_ACCESS_TOKEN == ""'
      when: never
    - if: '$MENDER_GATEWAY_VERSION != ""'
  stage: test
  needs:
    - job: generate-config:mender-gateway
      artifacts: true
  trigger:
    include:
      - job: generate-config:mender-gateway
        artifact: package-pipeline.yml

generate-config:mender-monitor:
  extends: .generate-config
  rules:
    - if: '$MENDER_PRIVATE_REPO_ACCESS_TOKEN == ""'
      when: never
    - if: '$MENDER_MONITOR_VERSION != ""'
  variables:
    TMPL_PACKAGE_NAME: mender-monitor
    TMPL_PACKAGE_VERSION: $MENDER_MONITOR_VERSION
    TMPL_PYTEST_FILTER: test_mender_monitor

child-pipeline:mender-monitor:
  rules:
    - if: '$MENDER_PRIVATE_REPO_ACCESS_TOKEN == ""'
      when: never
    - if: '$MENDER_MONITOR_VERSION != ""'
  stage: test
  needs:
    - job: generate-config:mender-monitor
      artifacts: true
  trigger:
    include:
      - job: generate-config:mender-monitor
        artifact: package-pipeline.yml

test:check-commits:
  only:
    variables:
      - '$TEST_MENDER_DIST_PACKAGES == "true"'

test:check-license:
  rules:
    - if: '$TEST_MENDER_DIST_PACKAGES == "true"'

test:check-python3-formatting:
  rules:
    - if: '$TEST_MENDER_DIST_PACKAGES == "true"'

test:acceptance:script:
  rules:
    - if: '$TEST_MENDER_DIST_PACKAGES == "true"'
  extends: .test:acceptance
  dependencies: []
  script:
    - apk --update --no-cache add python3 py3-pip
    - pip3 install --break-system-packages -r tests/requirements.txt
    - cd scripts/tests
    - python3 -m pytest -v --junit-xml results.xml
  artifacts:
    reports:
      junit: scripts/tests/results.xml

.publish_helper_functions: &publish_helper_functions |
  # Bash function to check if the string is a final tag
  function is_final_tag () {
    version="$1"
    [[ "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && return 0 || return $?
  }
  # Bash function to check if the string is a build tag
  function is_build_tag () {
    version="$1"
    [[ "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-build[0-9]+$ ]] && return 0 || return $?
  }

.template:publish:s3:apt-repo:
  stage: publish
  image: debian:buster
  before_script:
    - apt update && apt install -yyq awscli
    # Lock the bucket to block concurrent jobs
    - while aws s3 ls s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock; do
    -   echo "$S3_BUCKET_REPO_PATH locked, waiting..."
    -   sleep 10
    - done
    - touch lock
    - aws s3 mv lock s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock
  script:
    # Upload files: first .buildinfo and .deb, then .changes
    - for d in output/opensource/*; do
    -   find "$d" -name '*.buildinfo' -o -name '*.deb' -o -name '*.ddeb' -o -name '*.orig.tar.*' -o -name '*.debian.tar.*' -o -name '*.dsc' | while read -r file; do
    -     aws s3 cp "$file" "s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/${d}/"
    -   done
    -   find "$d" -name '*.changes' | while read -r file; do
    -     aws s3 cp "$file" "s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/${d}/"
    -   done
    - done
  after_script:
    - aws s3 rm s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock

publish:s3:apt-repo:manual:
  when: manual
  extends: .template:publish:s3:apt-repo

publish:s3:apt-repo:automatic:
  rules:
    - if: '$PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC == "true"'
  extends: .template:publish:s3:apt-repo

.publish-template:s3:scripts:install-mender-sh:
  stage: publish
  image: debian:buster
  before_script:
    - apt update && apt install -yyq awscli
  only:
    changes:
      - scripts/install-mender.sh

publish:staging:s3:scripts:install-mender-sh:
  extends: .publish-template:s3:scripts:install-mender-sh
  script:
    - echo "Publishing install-mender.sh to S3 (staging)"
    - aws s3 cp scripts/install-mender.sh s3://$S3_BUCKET_NAME/$S3_BUCKET_SCRIPTS_PATH/staging/install-mender.sh --content-type text/plain
    - aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key ${S3_BUCKET_SCRIPTS_PATH}/staging/install-mender.sh
  only:
    refs:
      - master

publish:production:s3:scripts:install-mender-sh:
  extends: .publish-template:s3:scripts:install-mender-sh
  script:
    - echo "Publishing install-mender.sh to S3 (production)"
    - aws s3 cp scripts/install-mender.sh s3://$S3_BUCKET_NAME/$S3_BUCKET_SCRIPTS_PATH/install-mender.sh --content-type text/plain
    - aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key ${S3_BUCKET_SCRIPTS_PATH}/install-mender.sh
  only:
    refs:
      - production

.template:publish:s3:
  stage: publish
  image: debian:buster
  before_script:
    - apt update && apt install -yyq awscli
    - *publish_helper_functions
  script:
    - echo "Publishing ${PUBLISH_PACKAGE_PREFIX} version ${PUBLISH_PACKAGE_VERSION} to s3://${S3_BUCKET_NAME_PRIVATE}/${PUBLISH_PACKAGE_S3_SUBPATH}/${PUBLISH_PACKAGE_VERSION}/"
    - find output/commercial -name "${PUBLISH_PACKAGE_PREFIX}*.deb" | while read -r file; do
    -   aws s3 cp "$file" s3://${S3_BUCKET_NAME_PRIVATE}/${PUBLISH_PACKAGE_S3_SUBPATH}/${PUBLISH_PACKAGE_VERSION}/
    #   Make copy for "master" to be consumed by get.mender.io script:
    -   if [ "${PUBLISH_PACKAGE_VERSION}" == "master" ]; then
    -     copy_filename=$(basename "$file" | sed 's/_[^\+]*/_master-1/; s/\+builder[^_]*//')
    -     aws s3 cp "$file" s3://${S3_BUCKET_NAME_PRIVATE}/${PUBLISH_PACKAGE_S3_SUBPATH}/${PUBLISH_PACKAGE_VERSION}/${copy_filename}
    -   fi
    - done

.template:publish:s3:mender-monitor:
  variables:
    PUBLISH_PACKAGE_PREFIX: "mender-monitor"
    PUBLISH_PACKAGE_VERSION: "$MENDER_MONITOR_VERSION"
    PUBLISH_PACKAGE_S3_SUBPATH: "$S3_BUCKET_SUBPATH_MONITOR"
  extends: .template:publish:s3

publish:s3:mender-monitor:manual:
  when: manual
  extends: .template:publish:s3:mender-monitor

publish:s3:mender-monitor:automatic:
  rules:
    - if: '$PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC == "true"'
  extends: .template:publish:s3:mender-monitor

.template:publish:s3:mender-gateway:
  variables:
    PUBLISH_PACKAGE_PREFIX: "mender-gateway"
    PUBLISH_PACKAGE_VERSION: "$MENDER_GATEWAY_VERSION"
    PUBLISH_PACKAGE_S3_SUBPATH: "$S3_BUCKET_SUBPATH_GATEWAY"
  extends: .template:publish:s3

publish:s3:mender-gateway:manual:
  when: manual
  extends: .template:publish:s3:mender-gateway

publish:s3:mender-gateway:automatic:
  rules:
    - if: '$PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC == "true"'
  extends: .template:publish:s3:mender-gateway
