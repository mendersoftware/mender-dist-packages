variables:
  # Packages versions
  MENDER_VERSION: "master"
  MENDER_CONNECT_VERSION: "master"
  MENDER_CONFIGURE_VERSION: "master"
  # Bucket name
  S3_BUCKET_NAME: "mender"
  # Legacy path for mender-client: <version>/$S3_BUCKET_SUBPATH/...
  S3_BUCKET_SUBPATH: "dist-packages/debian"
  # APT repo path
  S3_BUCKET_REPO_PATH: "repos/debian"
  # Scripts folder subpath
  S3_BUCKET_SCRIPTS_PATH: "repos/scripts"
  # Set to true to skip tests (i.e. old Mender client build). See QA-123
  SKIP_TESTS: "false"
  # Update the 'latest' debian alias to a new client release
  PUBLISH_LATEST_CLIENT_PACKAGE: "false"
  # GPG keys for build and distribution, to be set by CI/CD variables
  GPG_PRIV_KEY_BUILD: ""
  GPG_PUB_KEY_BUILD: ""
  GPG_PRIV_KEY_DIST: ""

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits-signoffs.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-license.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-python3-format.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'

stages:
  - build
  - test
  # - publish

build:
  stage: build
  image: docker:git
  services:
    - docker:dind
  before_script:
    - apk --update --no-cache add bash sudo
  script:
    # GPG key is available only in protected branches
    - if [ "$GPG_PRIV_KEY_BUILD" != "" ]; then
    -   GPG_KEY_BUILD="$GPG_PRIV_KEY_BUILD"
        ./docker-mender-dist-packages
    - else
    -   ./docker-mender-dist-packages
    - fi
  artifacts:
    paths:
      - output/*

test:acceptance:
  except:
    variables:
      - $SKIP_TESTS == "true"
  stage: test
  image: docker:19.03-dind
  tags:
    - mender-qa-slave
  dependencies:
    - build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    # DinD setup in mender-qa-slave
    - unset DOCKER_HOST
    - unset DOCKER_TLS_VERIFY
    - unset DOCKER_CERT_PATH
    # Start dockerd in the background
    - /usr/local/bin/dockerd &
    # Wait for dockerd to start
    - |-
      MAX_WAIT=30
      while [ ! -e "/var/run/docker.sock" ] && [ $MAX_WAIT -gt 0 ]; do
        MAX_WAIT=$(($MAX_WAIT - 1))
        sleep 1
      done
    # Verify that the docker server is up and running
    - docker version
    # Git submodules
    - apk --update --no-cache add git python3 py3-pip gcc openssh make openssl-dev
      libffi-dev libc-dev python3-dev bash musl-dev rust cargo
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - cd tests
    - pip3 install -r requirements.txt
    - python3 -m pytest -v
      --mender-client-version $MENDER_VERSION
      --mender-client-deb-version $(cat ${CI_PROJECT_DIR}/output/mender-client-deb-version)
      --mender-connect-version $MENDER_CONNECT_VERSION
      --mender-connect-deb-version $(cat ${CI_PROJECT_DIR}/output/mender-connect-deb-version)
      --mender-configure-version $MENDER_CONFIGURE_VERSION
      --mender-configure-deb-version $(cat ${CI_PROJECT_DIR}/output/mender-configure-deb-version)

# publish:s3:apt-repo:
#   stage: publish
#   only:
#     - master
#   image: debian:buster
#   dependencies:
#     - build
#   before_script:
#     - apt update && apt install -yyq reprepro awscli
#     # Check and import GPG keys
#     - if [ -z "$GPG_PRIV_KEY_DIST" -o -z "$GPG_PUB_KEY_BUILD" ]; then
#     -   echo "Error. GPG keys not available"
#     -   exit 1
#     - fi
#     - echo "$GPG_PRIV_KEY_DIST" | gpg --import
#     - echo "$GPG_PUB_KEY_BUILD" | gpg --import
#     # Lock the bucket to block concurrent jobs
#     - while aws s3 ls s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock; do
#     -     echo "$S3_BUCKET_REPO_PATH locked, waiting..."
#     -     sleep 10
#     - done
#     - touch lock
#     - aws s3 mv lock s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock
#     # Prepare repo from two S3 buckets
#     - mkdir repo
#     - cd repo
#     - aws s3 cp --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/conf conf
#     - aws s3 cp --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/db db
#     - aws s3 cp --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/dists dists
#     - aws s3 cp --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/pool pool
#   script:
#     # If build from final tag, include in stable
#     - if echo "${MENDER_VERSION}" | egrep -q '^[0-9]+\.[0-9]+\.[0-9]+$'; then
#     -   for change_file in $(ls ${CI_PROJECT_DIR}/output/mender-client_*.changes); do
#     -     reprepro --keepunreferencedfiles include stable $change_file
#     -   done
#     - fi
#     - if echo "${MENDER_CONNECT_VERSION}" | egrep -q '^[0-9]+\.[0-9]+\.[0-9]+$'; then
#     -   for change_file in $(ls ${CI_PROJECT_DIR}/output/mender-connect_*.changes); do
#     -     reprepro --keepunreferencedfiles include stable $change_file
#     -   done
#     - fi
#     - if echo "${MENDER_CONFIGURE_VERSION}" | egrep -q '^[0-9]+\.[0-9]+\.[0-9]+$'; then
#     -   for change_file in $(ls ${CI_PROJECT_DIR}/output/mender-configure_*.changes); do
#     -     reprepro --keepunreferencedfiles include stable $change_file
#     -   done
#     - fi
#     # Include everything else to experimental. Allow failures to ignore wrong
#     # distribution (final tags) or to ignore checksum mismatches (master rebuilds)
#     - for change_file in $(ls ${CI_PROJECT_DIR}/output/*.changes); do
#     -   reprepro --keepunreferencedfiles include experimental $change_file || true
#     - done
#     # Upload to bucket
#     - aws s3 sync db s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/db
#     - aws s3 sync pool s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/pool
#     - aws s3 ls --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/pool/ |
#       awk '{cmd="aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key "$4; system(cmd)}'
#     - aws s3 sync dists s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/dists
#     - aws s3 ls --recursive s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/dists/ |
#       awk '{cmd="aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key "$4; system(cmd)}'
#   after_script:
#     - aws s3 rm s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock

# publish:s3:legacy:mender-client:
#   stage: publish
#   image: debian:buster
#   dependencies:
#     - build
#   before_script:
#     - apt update && apt install -yyq awscli
#     - deb_version=$(cat output/mender-client-deb-version)
#   script:
#     - echo "Publishing ${MENDER_VERSION} packages to S3"
#     # For master packages, the Debian version is "0.0~git[iso-date].[git-hash]-1" and we make a copy named "master" for GUI to use
#     - for arch in amd64 arm64 armhf; do
#         aws s3 cp output/mender-client_${deb_version}_${arch}.deb
#           s3://${S3_BUCKET_NAME}/${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_${deb_version}_${arch}.deb;
#         aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME}
#           --key ${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_${deb_version}_${arch}.deb;
#         if [ "${MENDER_VERSION}" == "master" ]; then
#           aws s3 cp output/mender-client_${deb_version}_${arch}.deb
#             s3://${S3_BUCKET_NAME}/${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_master-1_${arch}.deb;
#           aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME}
#             --key ${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_master-1_${arch}.deb;
#         fi;
#       done
#   only:
#     - master

# publish:s3:legacy:mender-client:latest:
#   extends: publish:s3:legacy:mender-client
#   only:
#     variables:
#       - $PUBLISH_LATEST_CLIENT_PACKAGE == "true"
#   script:
#     - echo "Publishing latest packages to S3"
#     - for arch in amd64 arm64 armhf; do
#         aws s3 cp output/mender-client_${deb_version}_${arch}.deb
#           s3://${S3_BUCKET_NAME}/latest/${S3_BUCKET_SUBPATH}/${arch}/mender-client_latest_${arch}.deb;
#         aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME}
#           --key latest/${S3_BUCKET_SUBPATH}/${arch}/mender-client_latest_${arch}.deb;
#       done

# .publish-template:s3:scripts:install-mender-sh:
#   stage: publish
#   dependencies:
#     - test:acceptance
#   image: debian:buster
#   before_script:
#     - apt update && apt install -yyq awscli
#   only:
#     changes:
#       - scripts/install-mender.sh

# publish:staging:s3:scripts:install-mender-sh:
#   extends: .publish-template:s3:scripts:install-mender-sh
#   script:
#     - echo "Publishing install-mender.sh to S3 (staging)"
#     - aws s3 cp scripts/install-mender.sh s3://$S3_BUCKET_NAME/$S3_BUCKET_SCRIPTS_PATH/staging/install-mender.sh --content-type text/plain
#     - aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key ${S3_BUCKET_SCRIPTS_PATH}/staging/install-mender.sh
#   only:
#     refs:
#       - master

# publish:production:s3:scripts:install-mender-sh:
#   extends: .publish-template:s3:scripts:install-mender-sh
#   script:
#     - echo "Publishing install-mender.sh to S3 (production)"
#     - aws s3 cp scripts/install-mender.sh s3://$S3_BUCKET_NAME/$S3_BUCKET_SCRIPTS_PATH/install-mender.sh --content-type text/plain
#     - aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key ${S3_BUCKET_SCRIPTS_PATH}/install-mender.sh
#   only:
#     refs:
#       - production
