variables:
  # Packages versions
  MENDER_VERSION: "master"
  MENDER_CONNECT_VERSION: "master"
  MENDER_CONFIGURE_VERSION: "master"
  MENDER_GATEWAY_VERSION: "master"
  MENDER_MONITOR_VERSION: "master"
  # Bucket name
  S3_BUCKET_NAME: "mender"
  S3_BUCKET_NAME_PRIVATE: "mender-binaries"
  # Legacy path for mender-client: <version>/$S3_BUCKET_SUBPATH/...
  S3_BUCKET_SUBPATH: "dist-packages/debian"
  S3_BUCKET_SUBPATH_GATEWAY: "mender-gateway/debian"
  S3_BUCKET_SUBPATH_MONITOR: "mender-monitor/debian"
  # APT repo path for incoming packages
  S3_BUCKET_REPO_PATH: "repos/debian/incoming"
  # Scripts folder subpath
  S3_BUCKET_SCRIPTS_PATH: "repos/scripts"
  # GPG keys for build and distribution, to be set by CI/CD variables
  GPG_PRIV_KEY_BUILD: ""
  GPG_PUB_KEY_BUILD: ""
  GPG_PRIV_KEY_DIST: ""
  # Whether to run acceptance tests.
  TEST_MENDER_DIST_PACKAGES: "true"
  # Whether to publish packages automatically - they can always be published manually
  PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC: "false"
  # Workaround for GitLab intermittent networking
  FF_NETWORK_PER_BUILD: 1

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits-signoffs.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-license.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-python3-format.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'

stages:
  - build:images
  - build:packages
  - test
  - publish

.template:build:image:
  stage: build:images
  image: docker:git
  tags:
    - mender-qa-slave
  services:
    - docker:dind
  before_script:
    - apk --update --no-cache add bash curl aws-cli
    - eval "$(curl https://raw.githubusercontent.com/mendersoftware/mendertesting/master/mender-ci-common.sh)"
  script:
    # GPG key is available only in protected branches
    - if [ "$GPG_PRIV_KEY_BUILD" != "" ]; then
    -   GPG_KEY_BUILD="$GPG_PRIV_KEY_BUILD"
        ./docker-build-image $DISTRO $RELEASE $ARCH
    - else
    -   ./docker-build-image $DISTRO $RELEASE $ARCH
    - fi
    - docker save mendersoftware/mender-dist-packages:builder-$DISTRO-$RELEASE-$ARCH -o builder-$DISTRO-$RELEASE-$ARCH.tar
    - mender_ci_save_tmp_artifact builder-$DISTRO-$RELEASE-$ARCH.tar
  artifacts:
    paths:
      - checksums

build:image:debian:buster:amd64:
  variables:
    DISTRO: "debian"
    RELEASE: "buster"
    ARCH: "amd64"
  extends: .template:build:image

build:image:debian:buster:armhf:
  variables:
    DISTRO: "debian"
    RELEASE: "buster"
    ARCH: "armhf"
  extends: .template:build:image

build:image:debian:buster:arm64:
  variables:
    DISTRO: "debian"
    RELEASE: "buster"
    ARCH: "arm64"
  extends: .template:build:image

build:image:debian:bullseye:amd64:
  variables:
    DISTRO: "debian"
    RELEASE: "bullseye"
    ARCH: "amd64"
  extends: .template:build:image

build:image:debian:bullseye:armhf:
  variables:
    DISTRO: "debian"
    RELEASE: "bullseye"
    ARCH: "armhf"
  extends: .template:build:image

build:image:debian:bullseye:arm64:
  variables:
    DISTRO: "debian"
    RELEASE: "bullseye"
    ARCH: "arm64"
  extends: .template:build:image

build:image:ubuntu:bionic:amd64:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "bionic"
    ARCH: "amd64"
  extends: .template:build:image

build:image:ubuntu:bionic:armhf:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "bionic"
    ARCH: "armhf"
  extends: .template:build:image

build:image:ubuntu:bionic:arm64:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "bionic"
    ARCH: "arm64"
  extends: .template:build:image

build:image:ubuntu:focal:amd64:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "focal"
    ARCH: "amd64"
  extends: .template:build:image

build:image:ubuntu:focal:armhf:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "focal"
    ARCH: "armhf"
  extends: .template:build:image

build:image:ubuntu:focal:arm64:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "focal"
    ARCH: "arm64"
  extends: .template:build:image

.template:build:packages:
  stage: build:packages
  image: docker:git
  tags:
    - mender-qa-slave
  services:
    - docker:dind
  before_script:
    - apk --update --no-cache add bash curl aws-cli
    - eval "$(curl https://raw.githubusercontent.com/mendersoftware/mendertesting/master/mender-ci-common.sh)"
    - mender_ci_load_tmp_artifact builder-$DISTRO-$RELEASE-$ARCH.tar
    - docker load -i builder-$DISTRO-$RELEASE-$ARCH.tar
  script:
    - apk --update --no-cache add bash
    - ./docker-build-package $DISTRO $RELEASE $ARCH mender-client $MENDER_VERSION
    - ./docker-build-package $DISTRO $RELEASE $ARCH mender-connect $MENDER_CONNECT_VERSION
    - ./docker-build-package $DISTRO $RELEASE $ARCH mender-configure $MENDER_CONFIGURE_VERSION
    - if [ -n "${MENDER_PRIVATE_REPO_ACCESS_TOKEN}" ]; then
    -   ./docker-build-package $DISTRO $RELEASE $ARCH mender-gateway $MENDER_GATEWAY_VERSION
    -   ./docker-build-package $DISTRO $RELEASE $ARCH mender-monitor $MENDER_MONITOR_VERSION
    - fi
  artifacts:
    paths:
      - output/*

build:packages:debian:buster:amd64:
  variables:
    DISTRO: "debian"
    RELEASE: "buster"
    ARCH: "amd64"
  dependencies:
    - build:image:debian:buster:amd64
  extends: .template:build:packages

build:packages:debian:buster:armhf:
  variables:
    DISTRO: "debian"
    RELEASE: "buster"
    ARCH: "armhf"
  dependencies:
    - build:image:debian:buster:armhf
  extends: .template:build:packages

build:packages:debian:buster:arm64:
  variables:
    DISTRO: "debian"
    RELEASE: "buster"
    ARCH: "arm64"
  dependencies:
    - build:image:debian:buster:arm64
  extends: .template:build:packages

build:packages:debian:bullseye:amd64:
  variables:
    DISTRO: "debian"
    RELEASE: "bullseye"
    ARCH: "amd64"
  dependencies:
    - build:image:debian:bullseye:amd64
  extends: .template:build:packages

build:packages:debian:bullseye:armhf:
  variables:
    DISTRO: "debian"
    RELEASE: "bullseye"
    ARCH: "armhf"
  dependencies:
    - build:image:debian:bullseye:armhf
  extends: .template:build:packages

build:packages:debian:bullseye:arm64:
  variables:
    DISTRO: "debian"
    RELEASE: "bullseye"
    ARCH: "arm64"
  dependencies:
    - build:image:debian:bullseye:arm64
  extends: .template:build:packages

build:packages:ubuntu:bionic:amd64:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "bionic"
    ARCH: "amd64"
  dependencies:
    - build:image:ubuntu:bionic:amd64
  extends: .template:build:packages

build:packages:ubuntu:bionic:armhf:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "bionic"
    ARCH: "armhf"
  dependencies:
    - build:image:ubuntu:bionic:armhf
  extends: .template:build:packages

build:packages:ubuntu:bionic:arm64:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "bionic"
    ARCH: "arm64"
  dependencies:
    - build:image:ubuntu:bionic:arm64
  extends: .template:build:packages

build:packages:ubuntu:focal:amd64:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "focal"
    ARCH: "amd64"
  dependencies:
    - build:image:ubuntu:focal:amd64
  extends: .template:build:packages

build:packages:ubuntu:focal:armhf:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "focal"
    ARCH: "armhf"
  dependencies:
    - build:image:ubuntu:focal:armhf
  extends: .template:build:packages

build:packages:ubuntu:focal:arm64:
  variables:
    DISTRO: "ubuntu"
    RELEASE: "focal"
    ARCH: "arm64"
  dependencies:
    - build:image:ubuntu:focal:arm64
  extends: .template:build:packages

test:check-commits:
  only:
    variables:
      - '$TEST_MENDER_DIST_PACKAGES == "true"'

test:check-license:
  rules:
    - if: '$TEST_MENDER_DIST_PACKAGES == "true"'

test:check-python3-formatting:
  rules:
    - if: '$TEST_MENDER_DIST_PACKAGES == "true"'

test:acceptance:
  rules:
    - if: '$TEST_MENDER_DIST_PACKAGES == "true"'
  stage: test
  image: docker:19.03-dind
  tags:
    - mender-qa-slave
  dependencies:
    # Note that we are only testing packages from Debian buster
    - build:packages:debian:buster:amd64
    - build:packages:debian:buster:armhf
    - build:packages:debian:buster:arm64
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    # DinD setup in mender-qa-slave
    - unset DOCKER_HOST
    - unset DOCKER_TLS_VERIFY
    - unset DOCKER_CERT_PATH
    # Start dockerd in the background
    - /usr/local/bin/dockerd &
    # Wait for dockerd to start
    - |-
      MAX_WAIT=30
      while [ ! -e "/var/run/docker.sock" ] && [ $MAX_WAIT -gt 0 ]; do
        MAX_WAIT=$(($MAX_WAIT - 1))
        sleep 1
      done
    # Verify that the docker server is up and running
    - docker version
    # Git submodules
    - apk --update --no-cache add git
    - git submodule sync --recursive
    - git submodule update --init --recursive
  script:
    - apk --update --no-cache add python3 py3-pip gcc openssh make openssl-dev
      libffi-dev libc-dev python3-dev bash musl-dev rust cargo
    - cd tests
    - pip3 install -r requirements.txt
    - python3 -m pytest -v
      --mender-client-version $MENDER_VERSION
      --mender-client-deb-version $(cat ${CI_PROJECT_DIR}/output/opensource/mender-client-deb-version)
      --mender-connect-version $MENDER_CONNECT_VERSION
      --mender-connect-deb-version $(cat ${CI_PROJECT_DIR}/output/opensource/mender-connect-deb-version)
      --mender-configure-version $MENDER_CONFIGURE_VERSION
      --mender-configure-deb-version $(cat ${CI_PROJECT_DIR}/output/opensource/mender-configure-deb-version)
    - |-
        if [ -f ${CI_PROJECT_DIR}/output/commercial/mender-gateway-deb-version ] && \
           [ -f ${CI_PROJECT_DIR}/output/commercial/mender-monitor-deb-version ]; then
          python3 -m pytest -v \
            --mender-client-version $MENDER_VERSION \
            --mender-client-deb-version $(cat ${CI_PROJECT_DIR}/output/opensource/mender-client-deb-version) \
            --mender-connect-version $MENDER_CONNECT_VERSION \
            --mender-connect-deb-version $(cat ${CI_PROJECT_DIR}/output/opensource/mender-connect-deb-version) \
            --mender-configure-version $MENDER_CONFIGURE_VERSION \
            --mender-configure-deb-version $(cat ${CI_PROJECT_DIR}/output/opensource/mender-configure-deb-version) \
            --mender-gateway-version $MENDER_GATEWAY_VERSION \
            --mender-gateway-deb-version $(cat ${CI_PROJECT_DIR}/output/commercial/mender-gateway-deb-version) \
            --mender-monitor-version $MENDER_MONITOR_VERSION \
            --mender-monitor-deb-version $(cat ${CI_PROJECT_DIR}/output/commercial/mender-monitor-deb-version) \
            --commercial-tests
        fi

.publish_helper_functions: &publish_helper_functions |
  # Bash function to check if the string is a final tag
  function is_final_tag () {
    version="$1"
    [[ "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && return 0 || return $?
  }
  # Bash function to check if the string is a build tag
  function is_build_tag () {
    version="$1"
    [[ "${version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+-build[0-9]+$ ]] && return 0 || return $?
  }

.template:publish:s3:apt-repo:
  stage: publish
  image: debian:buster
  dependencies:
    - build:packages:debian:buster:amd64
    - build:packages:debian:buster:armhf
    - build:packages:debian:buster:arm64
    - build:packages:debian:bullseye:amd64
    - build:packages:debian:bullseye:armhf
    - build:packages:debian:bullseye:arm64
    - build:packages:ubuntu:bionic:amd64
    - build:packages:ubuntu:bionic:armhf
    - build:packages:ubuntu:bionic:arm64
    - build:packages:ubuntu:focal:amd64
    - build:packages:ubuntu:focal:armhf
    - build:packages:ubuntu:focal:arm64
  before_script:
    - apt update && apt install -yyq awscli
    # Lock the bucket to block concurrent jobs
    - while aws s3 ls s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock; do
    -   echo "$S3_BUCKET_REPO_PATH locked, waiting..."
    -   sleep 10
    - done
    - touch lock
    - aws s3 mv lock s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock
  script:
    # Upload files: first .buildinfo and .deb, then .changes
    - find output/opensource -name '*.buildinfo' -o -name '*.deb' -o -name '*.orig.tar.*' -o -name '*.debian.tar.*' -o -name '*.dsc' | while read -r file; do
    -   aws s3 cp "$file" s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/
    - done
    - find output/opensource -name '*.changes' | while read -r file; do
    -   aws s3 cp "$file" s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/
    - done
  after_script:
    - aws s3 rm s3://$S3_BUCKET_NAME/$S3_BUCKET_REPO_PATH/lock

publish:s3:apt-repo:manual:
  when: manual
  extends: .template:publish:s3:apt-repo

publish:s3:apt-repo:automatic:
  rules:
    - if: '$PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC == "true"'
  extends: .template:publish:s3:apt-repo

.template:publish:s3:docs-link:mender-client:
  stage: publish
  image: debian:buster
  dependencies:
    # Note that we are using the packages from Debian buster
    - build:packages:debian:buster:amd64
    - build:packages:debian:buster:armhf
    - build:packages:debian:buster:arm64
  before_script:
    - apt update && apt install -yyq awscli
    - deb_version=$(cat output/opensource/mender-client-deb-version)
  script:
    - echo "Publishing ${MENDER_VERSION} packages to S3"
    # For master packages, the Debian version is "0.0~git[iso-date].[git-hash]-1" and we make a copy named "master" for GUI to use
    - for arch in amd64 arm64 armhf; do
        aws s3 cp output/opensource/mender-client_${deb_version}_${arch}.deb
          s3://${S3_BUCKET_NAME}/${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_${deb_version}_${arch}.deb;
        aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME}
          --key ${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_${deb_version}_${arch}.deb;
        if [ "${MENDER_VERSION}" == "master" ]; then
          aws s3 cp output/opensource/mender-client_${deb_version}_${arch}.deb
            s3://${S3_BUCKET_NAME}/${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_master-1+debian+buster_${arch}.deb;
          aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME}
            --key ${MENDER_VERSION}/${S3_BUCKET_SUBPATH}/${arch}/mender-client_master-1+debian+buster_${arch}.deb;
        fi;
      done

publish:s3:docs-link:mender-client:manual:
  when: manual
  extends: .template:publish:s3:docs-link:mender-client

publish:s3:docs-link:mender-client:automatic:
  rules:
    - if: '$PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC == "true"'
  extends: .template:publish:s3:docs-link:mender-client

.publish-template:s3:scripts:install-mender-sh:
  stage: publish
  image: debian:buster
  before_script:
    - apt update && apt install -yyq awscli
  only:
    changes:
      - scripts/install-mender.sh

publish:staging:s3:scripts:install-mender-sh:
  extends: .publish-template:s3:scripts:install-mender-sh
  script:
    - echo "Publishing install-mender.sh to S3 (staging)"
    - aws s3 cp scripts/install-mender.sh s3://$S3_BUCKET_NAME/$S3_BUCKET_SCRIPTS_PATH/staging/install-mender.sh --content-type text/plain
    - aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key ${S3_BUCKET_SCRIPTS_PATH}/staging/install-mender.sh
  only:
    refs:
      - master

publish:production:s3:scripts:install-mender-sh:
  extends: .publish-template:s3:scripts:install-mender-sh
  script:
    - echo "Publishing install-mender.sh to S3 (production)"
    - aws s3 cp scripts/install-mender.sh s3://$S3_BUCKET_NAME/$S3_BUCKET_SCRIPTS_PATH/install-mender.sh --content-type text/plain
    - aws s3api put-object-acl --acl public-read --bucket ${S3_BUCKET_NAME} --key ${S3_BUCKET_SCRIPTS_PATH}/install-mender.sh
  only:
    refs:
      - production

.template:publish:s3:
  stage: publish
  image: debian:buster
  dependencies:
    - build:packages:debian:buster:amd64
    - build:packages:debian:buster:armhf
    - build:packages:debian:buster:arm64
    - build:packages:debian:bullseye:amd64
    - build:packages:debian:bullseye:armhf
    - build:packages:debian:bullseye:arm64
    - build:packages:ubuntu:bionic:amd64
    - build:packages:ubuntu:bionic:armhf
    - build:packages:ubuntu:bionic:arm64
    - build:packages:ubuntu:focal:amd64
    - build:packages:ubuntu:focal:armhf
    - build:packages:ubuntu:focal:arm64
  before_script:
    - apt update && apt install -yyq awscli
    - *publish_helper_functions
  script:
    - echo "Publishing ${PUBLISH_PACKAGE_PREFIX} version ${PUBLISH_PACKAGE_VERSION} to s3://${S3_BUCKET_NAME_PRIVATE}/${PUBLISH_PACKAGE_S3_SUBPATH}/${PUBLISH_PACKAGE_VERSION}/"
    - find output/commercial -name "${PUBLISH_PACKAGE_PREFIX}*.deb" | while read -r file; do
    -   aws s3 cp "$file" s3://${S3_BUCKET_NAME_PRIVATE}/${PUBLISH_PACKAGE_S3_SUBPATH}/${PUBLISH_PACKAGE_VERSION}/
    #   Make copy for "master" to be consumed by get.mender.io script:
    -   if [ "${PUBLISH_PACKAGE_VERSION}" == "master" ]; then
    -     copy_filename=$(basename "$file" | sed 's/_[^\+]*/_master-1/; s/\+builder[^_]*//')
    -     aws s3 cp "$file" s3://${S3_BUCKET_NAME_PRIVATE}/${PUBLISH_PACKAGE_S3_SUBPATH}/${PUBLISH_PACKAGE_VERSION}/${copy_filename}
    -   fi
    - done

.template:publish:s3:mender-monitor:
  variables:
    PUBLISH_PACKAGE_PREFIX: "mender-monitor"
    PUBLISH_PACKAGE_VERSION: "$MENDER_MONITOR_VERSION"
    PUBLISH_PACKAGE_S3_SUBPATH: "$S3_BUCKET_SUBPATH_MONITOR"
  extends: .template:publish:s3

publish:s3:mender-monitor:manual:
  when: manual
  extends: .template:publish:s3:mender-monitor

publish:s3:mender-monitor:automatic:
  rules:
    - if: '$PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC == "true"'
  extends: .template:publish:s3:mender-monitor

.template:publish:s3:mender-gateway:
  variables:
    PUBLISH_PACKAGE_PREFIX: "mender-gateway"
    PUBLISH_PACKAGE_VERSION: "$MENDER_GATEWAY_VERSION"
    PUBLISH_PACKAGE_S3_SUBPATH: "$S3_BUCKET_SUBPATH_GATEWAY"
  extends: .template:publish:s3

publish:s3:mender-gateway:manual:
  when: manual
  extends: .template:publish:s3:mender-gateway

publish:s3:mender-gateway:automatic:
  rules:
    - if: '$PUBLISH_MENDER_DIST_PACKAGES_AUTOMATIC == "true"'
  extends: .template:publish:s3:mender-gateway

.template:publish:s3:latest:manual:
  when: manual
  stage: publish
  image: debian:buster
  dependencies:
    - build:packages:debian:buster:amd64
    - build:packages:debian:buster:armhf
    - build:packages:debian:buster:arm64
    - build:packages:debian:bullseye:amd64
    - build:packages:debian:bullseye:armhf
    - build:packages:debian:bullseye:arm64
    - build:packages:ubuntu:bionic:amd64
    - build:packages:ubuntu:bionic:armhf
    - build:packages:ubuntu:bionic:arm64
    - build:packages:ubuntu:focal:amd64
    - build:packages:ubuntu:focal:armhf
    - build:packages:ubuntu:focal:arm64
  before_script:
    - apt update && apt install -yyq awscli
    - *publish_helper_functions
  script:
    - echo "Publishing "latest" package for ${PUBLISH_PACKAGE_PREFIX} to s3://${S3_BUCKET_NAME_PRIVATE}/${PUBLISH_PACKAGE_S3_SUBPATH}/${PUBLISH_PACKAGE_VERSION}/"
    - if ! is_final_tag "${PUBLISH_PACKAGE_VERSION}"; then
    -   echo "Attempting to publish a "latest" package for a non final tag!"
    -   exit 1
    - fi
    - find output/commercial -name "${PUBLISH_PACKAGE_PREFIX}*.deb" | while read -r file; do
    #   Make copy for "latest" to be consumed by get.mender.io script:
    -   copy_filename=$(basename "$file" | sed 's/_[^\+]*/_latest-1/; s/\+builder[^_]*//')
    -   aws s3 cp "$file" s3://${S3_BUCKET_NAME_PRIVATE}/${PUBLISH_PACKAGE_S3_SUBPATH}/${PUBLISH_PACKAGE_VERSION}/${copy_filename}
    - done

publish:s3:latest:manual:mender-monitor:
  variables:
    PUBLISH_PACKAGE_PREFIX: "mender-monitor"
    PUBLISH_PACKAGE_VERSION: "$MENDER_MONITOR_VERSION"
    PUBLISH_PACKAGE_S3_SUBPATH: "$S3_BUCKET_SUBPATH_MONITOR"
  extends: .template:publish:s3:latest:manual

publish:s3:latest:manual:mender-gateway:
  variables:
    PUBLISH_PACKAGE_PREFIX: "mender-gateway"
    PUBLISH_PACKAGE_VERSION: "$MENDER_GATEWAY_VERSION"
    PUBLISH_PACKAGE_S3_SUBPATH: "$S3_BUCKET_SUBPATH_GATEWAY"
  extends: .template:publish:s3:latest:manual
